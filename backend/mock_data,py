import asyncio
import random
import time
from collections import deque
from fastapi import FastAPI, WebSocket
from fastapi.responses import JSONResponse

app = FastAPI()

# -------------------------
# 配置
# -------------------------
SERVERS = ["srv-001", "srv-002", "srv-003"]
HISTORY_WINDOW = 15 * 60  # 15 分钟
INTERVAL = 2  # 每 2 秒生成一次数据

# -------------------------
# 内存存储
# -------------------------
metrics_history = {s: deque(maxlen=HISTORY_WINDOW // INTERVAL) for s in SERVERS}
tasks = []
alerts = deque(maxlen=100)

# -------------------------
# 数据生成器
# -------------------------
def gen_metric(server_id):
    return {
        "serverId": server_id,
        "timestamp": time.time(),
        "metrics": {
            "cpu": round(random.uniform(10, 95), 2),
            "memory": round(random.uniform(20, 90), 2),
            "disk": round(random.uniform(30, 80), 2),
            "netIn": round(random.uniform(100, 500), 2),
            "netOut": round(random.uniform(100, 500), 2),
            "load1m": round(random.uniform(0, 8), 2),
        },
    }

def gen_task():
    return {
        "taskId": f"task-{int(time.time())}",
        "name": f"ETL-Job-{random.randint(1,10)}",
        "cluster": random.choice(["cluster-A", "cluster-B"]),
        "status": random.choice(["queued", "running", "failed", "completed"]),
        "progress": random.randint(0, 100),
        "updatedAt": time.time(),
    }

def gen_alert(server_id, metric):
    if metric["cpu"] > 85:
        return {
            "alertId": f"alert-{int(time.time()*1000)}",
            "time": time.time(),
            "source": server_id,
            "severity": "high",
            "message": f"CPU usage {metric['cpu']}% exceeded 85%",
        }
    if metric["memory"] > 90:
        return {
            "alertId": f"alert-{int(time.time()*1000)}",
            "time": time.time(),
            "source": server_id,
            "severity": "medium",
            "message": f"Memory usage {metric['memory']}% exceeded 90%",
        }
    return None

# -------------------------
# WebSocket：实时指标流
# -------------------------
@app.websocket("/ws/metrics")
async def ws_metrics(ws: WebSocket):
    await ws.accept()
    try:
        while True:
            batch = []
            for s in SERVERS:
                m = gen_metric(s)
                metrics_history[s].append(m)
                batch.append(m)
                # 可能生成告警
                alert = gen_alert(s, m["metrics"])
                if alert:
                    alerts.append(alert)

            await ws.send_json(batch)
            await asyncio.sleep(INTERVAL)
    except Exception:
        await ws.close()

# -------------------------
# HTTP API
# -------------------------

@app.get("/api/tasks")
async def get_tasks():
    # 每次调用随机增加任务
    if len(tasks) < 10 or random.random() < 0.3:
        tasks.append(gen_task())
    return JSONResponse(tasks)

@app.get("/api/alerts")
async def get_alerts(limit: int = 10):
    return JSONResponse(list(alerts)[-limit:])

@app.get("/api/history/{server_id}")
async def get_history(server_id: str):
    if server_id not in metrics_history:
        return JSONResponse({"error": "unknown server"}, status_code=404)
    return JSONResponse(list(metrics_history[server_id]))
